1. Используй памятку.
2. Если выдаёт ошибку - исправляй.
3. Если нет ключа - создай (путь создания не менять - Enter)
4. Пишем cat и пишем путь ssh
5. Создаём SSH key на Гитхаб через настройки и вставляем ключ, который сгенерировали.
6. Переходим в репозитирий - менять можно только index.js !!!
7. Переходим в репозиторий с index.js
8. Копируем SSH ссылку из зелёного Code
9. mkdir test - cd test - git clone {SSH}
10. ls - cd {название папки} - make install
11. code index.js (переходим в VSC) - размечаем все 5 пустышек
12. Настроить автосохр. либо вручную (Ctrl + S) - КРУЖОЧЕК
*Возможные ошибки в терминале* 
: make lint - make lint-fix - (Если нет error - то всё ок)
: export (перечисляем все 5 функций)
: node index.js (тестирует работоспособность функций)
: Перед каждым пушем - make lint-fix

13. Прописываем функции - выполняем задачи
14. git add,  git add -A,  git commit -m "task1",  git push
15. Можно посмотреть решение задач Максима по пробнику со среды (Mattermost или Хекслет Ютуб канал)

*Наводящие вопросы по функциям*
- Что мне дано? Какие свойства
- Что от меня хотят?
- Как мне это сделать?
Большинтсво функций можно найти в Mozilla / Web



function getSum(a, b) { return a + b; }
//console.log(getSum(12,4));

function getSmallestNumber(a, b) { return (Math.min(a, b)); }
//console.log(getSmallestNumber(30, 20));

function castBoolean(value) {
   const result = Boolean(value);
   return result;
}

//console.log(castBoolean("zopa"));

function capitalize(str, num) {
  if (num < 0 || num + 1 > str.length) {
    return str;
  }
  return str.slice(0, num) + str[num].toUpperCase() + str.slice(num + 1, str.length);
}

console.log(capitalize('alo', 0));


Message

function countCapitalLetters() {}

export {
  getSum, getSmallestNumber, castBoolean, capitalize, countCapitalLetters,
};




const readlineSync = require('readline-sync');

console.log('Калькулятор налога на доходы(15 процентов)');

const income = Number(readlineSync.question('Доходы: ')); 

const text = 0.15;

const incomeTaxCalculator = (x) => {
    
    const result = x * 0.15;
    return result;
};

console.log(`Ответ: ${incomeTaxCalculator(income)}`);



const readlineSync = require('readline-sync');

console.log('Расчет периметра и площади прямоугольника');

const width = readlineSync.question('Ширина треугольника: '); 
const height = readlineSync.question('Высота треугольника: '); 

const calculateRectangleProperties = (a, b) => {

    const S = a * b;
    const P = 2 * a + 2 * b;

    const arrya = [S, P];
    return arrya;
};

console.log(`Площадь: ${calculateRectangleProperties(width, height)[0]}\nПериметр: ${calculateRectangleProperties(width, height)[1]}`);





const readlineSync = require('readline-sync');

console.log('Расчет расстояния между двумя точками в 2D');

const one = readlineSync.question('x1: '); 
const three = readlineSync.question('y1: '); 

const two = readlineSync.question('x2: '); 
const four = readlineSync.question('y2: '); 

const calculateDistance = (x1, y1, x2, y2) => {

    const x = x2 - x1;
    const y = y2 - y1;

    result = Math.sqrt(x ** 2 + y ** 2);

    return Math.abs(result);
};

console.log(`Ответ: ${calculateDistance(one, three, two, four)}`);





const readlineSync = require('readline-sync');

console.log('Расчет времени пути');

const distan = readlineSync.question('Дистанция: '); 
const speed = readlineSync.question('Скорость: '); 

const calculateTime = (a, b) => {
    
    const result = a / b;
    return result;
};

const time = calculateTime(distan, speed);
const hours = Math.round(time);
const minute = Math.round((time - hours) * 100);

console.log(`Ответ: ${hours}ч. ${minute}м.`);




const readlineSync = require('readline-sync');

console.log('Подсчет количества слов в строке');

const stroka = readlineSync.question('Строка: '); 

const countWords = (a) => {
    
    const words = a.split(' ');
    return words.length;
};

console.log(`Ответ: ${countWords(stroka)}`);





const readlineSync = require('readline-sync');

console.log('Калькулятор расходов и доходов');

const incomes = readlineSync.question('Доходы: ');
const expenses = readlineSync.question('Расходы: ');

const calculateBalance = (x1, x2) => {
    
    const result = Number(x1) - Number(x2);
    return result;
};

console.log(`Ответ: ${calculateBalance(incomes, expenses)}`);





const readlineSync = require('readline-sync');

console.log('Генератор случайных уравнений');

const generateRandomEquation = () => {

    const a = String(Math.round(Math.random() * 100));
    const b = String(Math.round(Math.random() * 100));
    const c = String(Math.round(Math.random() * 100));

    const x = (c - b) / a;

    console.log(`x = ${x}`)
    const result = `${a}x + ${b} = ${c}`;

    return result;
};

console.log(`Ответ: ${generateRandomEquation()}`);





const readlineSync = require('readline-sync');

console.log('Конвертер градусов Цельсия в Фаренгейты');

const сelsius = Number(readlineSync.question('Цельсии: ')); 

const celsiusToFahrenheit = (f) => {
    
    const fahrenheit = f * 9/5 + 32;
    return fahrenheit;
};

console.log(`Ответ: ${celsiusToFahrenheit(сelsius)}F`);





const readlineSync = require('readline-sync');

console.log('Расчет скидки в магазине');

const print = Number(readlineSync.question('Стоимость: ')); 
const text = Number(readlineSync.question('Процент: ')); 

const calculateDiscount = (x, y) => {

    let result = x;

    if (Math.floor(y) > 0) {
        result = x -= (x * y) / 100;
    }
    else {
        result = x -= x * y;
    }

    return result;
};

console.log(`Ответ: ${calculateDiscount(print, text)}`);





1. Ssh-keygen
    2. cat ~/.ssh/id_rsa.pub → enter enter enter
    3. copy ssh to github and generate new key
    4. ssh -T git@github.com
    5. ssh -T git@github.com
    6. git clone //ssh repository link//
    7. open folder that you needed in Terminal
    8. cat Makefile
    9. make install
    10. code index.js
    11. after coding — ctrl s
    12. node index.js
    13. make test
    14. make lint
    15. make lint-fix
    16. ctrl s
    17. make lint
    18. git add -A
    19. git commit -m «task»
    20. git push





const arr = [1,2,3];

const countAverage = (numbers) => {
  let sum = 0; 
  for (let i = 0; i < numbers.length; i += 1) { 
    sum += numbers[i]; 
  }
  return sum / numbers.length;
};

console.log(countAverage(arr)); 






const arr = [1,2,3,4];
function alphaOmega(inputArray) {

    let newArray = [];

    if (inputArray && inputArray.length > 0) {
        newArray.push(inputArray[0]);
        newArray.push(inputArray.at(-1));
    }

    return newArray;
}
console.log (alphaOmega (arr));






function fill(count, element) {
  let result = [];
  
  for (let i = 0; i < count; i++) {
    result.push(element);
  }
  
  return result;
}


const resultArray = fill(5, 'hello');
console.log(resultArray);
